// <auto-generated />
using System;
using CinemaDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CinemaDB.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211209071403_PartOne")]
    partial class PartOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CinemaDB.Models.Composer", b =>
                {
                    b.Property<int>("ComposerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComposerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComposerMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoviesMovieId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("ComposerId");

                    b.HasIndex("MoviesMovieId");

                    b.HasIndex("SessionID");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("CinemaDB.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DirectorFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectorMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoviesMovieId")
                        .HasColumnType("int");

                    b.Property<int?>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("DirectorId");

                    b.HasIndex("MoviesMovieId");

                    b.HasIndex("SessionID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("CinemaDB.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("MovieDuration")
                        .HasColumnType("real");

                    b.Property<string>("MovieName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CinemaDB.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateSession")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("SessionID");

                    b.HasIndex("UsersUserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CinemaDB.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserAge")
                        .HasColumnType("int");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieSession", b =>
                {
                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("int");

                    b.Property<int>("SongsSessionID")
                        .HasColumnType("int");

                    b.HasKey("MoviesMovieId", "SongsSessionID");

                    b.HasIndex("SongsSessionID");

                    b.ToTable("MovieSession");
                });

            modelBuilder.Entity("CinemaDB.Models.Composer", b =>
                {
                    b.HasOne("CinemaDB.Models.Movie", "Movies")
                        .WithMany("Composers")
                        .HasForeignKey("MoviesMovieId");

                    b.HasOne("CinemaDB.Models.Session", null)
                        .WithMany("Composers")
                        .HasForeignKey("SessionID");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CinemaDB.Models.Director", b =>
                {
                    b.HasOne("CinemaDB.Models.Movie", "Movies")
                        .WithMany("Albums")
                        .HasForeignKey("MoviesMovieId");

                    b.HasOne("CinemaDB.Models.Session", null)
                        .WithMany("Directors")
                        .HasForeignKey("SessionID");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CinemaDB.Models.Session", b =>
                {
                    b.HasOne("CinemaDB.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UsersUserId");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MovieSession", b =>
                {
                    b.HasOne("CinemaDB.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CinemaDB.Models.Session", null)
                        .WithMany()
                        .HasForeignKey("SongsSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CinemaDB.Models.Movie", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Composers");
                });

            modelBuilder.Entity("CinemaDB.Models.Session", b =>
                {
                    b.Navigation("Composers");

                    b.Navigation("Directors");
                });
#pragma warning restore 612, 618
        }
    }
}
